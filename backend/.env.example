# ===== データベース設定 =====
# データベース接続URL（形式: postgresql://ユーザー名:パスワード@ホスト:ポート/データベース名）
# 開発環境: postgresql://postgres:postgres@localhost:5432/categorydb
# Docker環境: postgresql://postgres:postgres@db:5432/categorydb
DATABASE_URL=postgresql://postgres:postgres@db:5432/categorydb

# ===== API設定 =====
# APIサーバーのホスト（0.0.0.0=すべてのインターフェースでリッスン）
API_HOST=0.0.0.0

# APIサーバーのポート（整数値）
API_PORT=8001

# ===== アプリケーション設定 =====
# デバッグモード（True=有効, False=無効）
# 開発時はTrue、本番環境ではFalseを推奨
DEBUG=False

# 実行環境（local=テストデータ自動登録, development=開発環境, production=本番環境）
# 値によってログレベルやエラー表示などの動作が変わります
ENVIRONMENT=local

# ===== Gemini API設定 =====
# Google Gemini APIキー（https://ai.google.dev/でキーを取得）
# 注意: APIキーは秘密情報のため、リポジトリにコミットしないでください
GEMINI_API_KEY=your-gemini-api-key-here

# ===== ログ設定 =====
# ロギングレベル（DEBUG, INFO, WARNING, ERROR, CRITICAL）
# 開発時はDEBUG、本番環境ではINFOかWARNINGを推奨
LOG_LEVEL=INFO

# ===== CORS設定 =====
# クロスオリジンリソース共有を許可するオリジン（カンマ区切りで複数指定可能）
# 例: http://localhost:3001,https://example.com,http://frontend:3001
ALLOWED_ORIGINS=http://localhost:3001,http://frontend:3001

# ===== セキュリティ設定 =====
# アプリケーションの秘密鍵（トークン生成などに使用）
# 本番環境では必ず強力なランダム文字列に変更してください
# 生成例: python -c "import secrets; print(secrets.token_hex(32))"
SECRET_KEY=your-secret-key-here