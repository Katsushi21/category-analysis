# ===== データベース設定 =====
# データベース接続URL（形式: postgresql://ユーザー名:パスワード@ホスト:ポート/データベース名）
# 本番環境ではセキュアなパスワードを設定してください
DATABASE_URL=postgresql://postgres:本番環境用のセキュアなパスワード@db:5432/categorydb

# ===== API設定 =====
# APIサーバーのホスト（0.0.0.0=すべてのインターフェースでリッスン）
API_HOST=0.0.0.0

# APIサーバーのポート（整数値）
API_PORT=8001

# APIのベースパス（本番環境用）
API_BASE_PATH=/category-analysis/api

# ===== アプリケーション設定 =====
# デバッグモード（True=有効, False=無効）
# 本番環境ではFalseを推奨
DEBUG=False

# 実行環境（local=テストデータ自動登録, development=開発環境, production=本番環境）
# 値によってログレベルやエラー表示などの動作が変わります
ENVIRONMENT=production

# ===== Gemini API設定 =====
# Google Gemini APIキー（https://ai.google.dev/でキーを取得）
# 注意: APIキーは秘密情報のため、リポジトリにコミットしないでください
GEMINI_API_KEY=本番環境用のAPIキーを設定してください

# Google Gemini モデル名
# 利用可能なモデル: gemini-1.5-pro, gemini-1.5-flash, gemini-2.0-pro, gemini-2.0-flash など
GEMINI_MODEL_NAME=gemini-2.0-flash

# ===== ログ設定 =====
# ロギングレベル（DEBUG, INFO, WARNING, ERROR, CRITICAL）
# 本番環境ではINFOかWARNINGを推奨
LOG_LEVEL=INFO

# ===== CORS設定 =====
# クロスオリジンリソース共有を許可するオリジン（カンマ区切りで複数指定可能）
# 本番環境では実際のドメインを指定
ALLOWED_ORIGINS=https://takano.signity.link

# ===== セキュリティ設定 =====
# アプリケーションの秘密鍵（トークン生成などに使用）
# 本番環境では必ず強力なランダム文字列に変更してください
# 生成例: python -c "import secrets; print(secrets.token_hex(32))"
SECRET_KEY=本番環境用の強力なランダム文字列を生成して設定

# ===== AIモデルプロバイダ設定 =====
# 使用するAIプロバイダ（gemini または claude）
# 本番環境では実際に使用するプロバイダを指定
AI_MODEL_PROVIDER=gemini